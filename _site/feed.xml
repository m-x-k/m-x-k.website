<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-24T16:03:26+00:00</updated><id>http://localhost:4000/</id><title type="html">MXK Software craftmanship blog</title><subtitle>Software craftmanship solutions covering various areas of Development, Architecture, Testing, Extreme Programming, Agile and DevOps.</subtitle><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><entry><title type="html">Python PIP Setup with artifactory</title><link href="http://localhost:4000/python/python-pip-setup-with-artifactory/" rel="alternate" type="text/html" title="Python PIP Setup with artifactory" /><published>2017-12-22T20:00:00+00:00</published><updated>2017-12-22T20:00:00+00:00</updated><id>http://localhost:4000/python/python-pip-setup-with-artifactory</id><content type="html" xml:base="http://localhost:4000/python/python-pip-setup-with-artifactory/">&lt;h2 id=&quot;installing-a-local-artifactory-instance&quot;&gt;Installing a local artifactory instance:&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull docker.bintray.io/jfrog/artifactory-oss:latest
docker run --name artifactory -d -p 8081:8081 docker.bintray.io/jfrog/artifactory-oss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In browser open http://localhost:8081&lt;/li&gt;
  &lt;li&gt;Add new remote repository: http://localhost:8081/artifactory/webapp/#/admin/repositories/remote
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jfrog.com/confluence/display/RTF/PyPI+Repositories&quot;&gt;Setup your artifactory instance with PyPI&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using the remote repositories that you created you should be able to setup your local environment (or container). I usually script this up with something simple like the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/4a6acaea415e6ff112c5980996147fc4.js&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;You can also perform &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install&lt;/code&gt; commands pointed directly if you want to test it. For example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --index-url http://localhost:8081/artifactory/api/pypi/repo-pypi-virtual/simple requests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Some additional commands can be useful here such as &lt;code class=&quot;highlighter-rouge&quot;&gt;--disable-pip-version-check&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--trusted-host &amp;lt;HOST&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="python" /><category term="artifactory" /><category term="pypi" /><summary type="html">Installing a local artifactory instance:</summary></entry><entry><title type="html">Creating a Blog with Jekyll and GitHub pages</title><link href="http://localhost:4000/jekyll/creating-blog-with-github-pages-and-jekyll/" rel="alternate" type="text/html" title="Creating a Blog with Jekyll and GitHub pages" /><published>2017-12-20T08:50:20+00:00</published><updated>2017-12-20T08:50:20+00:00</updated><id>http://localhost:4000/jekyll/creating-blog-with-github-pages-and-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/creating-blog-with-github-pages-and-jekyll/">&lt;h2 id=&quot;steps-to-create-a-sample-blog-created-using-jekyll-and-hosted-on-github&quot;&gt;Steps to create a sample blog created using Jekyll and hosted on GitHub.&lt;/h2&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;If you want to create a similar blog you can either fork this &lt;a href=&quot;https://github.com/m-x-k/m-x-k.github.io&quot;&gt;implementation&lt;/a&gt; or create a new one by installing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Jekyll&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;jekyll new .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;development&quot;&gt;Development&lt;/h3&gt;

&lt;p&gt;To setup your environment with all the required plugins run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The blog entries can be tested locally using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; and loading &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New blog entries can be added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt; folder and follow the standard markdown syntax.&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;GitHub pages&lt;/h3&gt;

&lt;p&gt;To view this blog goto: &lt;a href=&quot;https://github.com/USERNAME.github.io&quot;&gt;https://github.com/USERNAME.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively you can use GitLab pages which appears to work exactly the same :-)&lt;/p&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;p&gt;Jekyll has many useful plugins including for example &lt;a href=&quot;https://github.com/jekyll/jekyll-gist&quot;&gt;jekyll-gist&lt;/a&gt; which allows you to embed gists into your blog entries.&lt;/p&gt;

&lt;h3 id=&quot;additional&quot;&gt;Additional&lt;/h3&gt;

&lt;h4 id=&quot;useful-links&quot;&gt;Useful links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Jekyll installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Jekyll" /><category term="GitHub" /><summary type="html">Steps to create a sample blog created using Jekyll and hosted on GitHub.</summary></entry><entry><title type="html">Presentation slides with Reveal.js</title><link href="http://localhost:4000/javascript/revealjs/Presentation-slides-with-Reveal/" rel="alternate" type="text/html" title="Presentation slides with Reveal.js" /><published>2017-11-21T20:20:41+00:00</published><updated>2017-11-21T20:20:41+00:00</updated><id>http://localhost:4000/javascript/revealjs/Presentation-slides-with-Reveal</id><content type="html" xml:base="http://localhost:4000/javascript/revealjs/Presentation-slides-with-Reveal/">&lt;p&gt;Using the reveal javascript library its possible to build intricate presentation slides for the browser. While its possible to create a sample using a web client over at &lt;a href=&quot;https://slides.com/&quot;&gt;https://slides.com/&lt;/a&gt; I personally prefer to download the latest version directly from the github account &lt;a href=&quot;https://github.com/hakimel/reveal.js/releases/latest&quot;&gt;Latest release&lt;/a&gt; in order to generate your slide presentation by hand.&lt;/p&gt;

&lt;p&gt;Steps to get it all up and running:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Create a new folder and extract the latest reveal.js code into a sub-folder called &quot;reveal.js&quot;&lt;/li&gt;
	&lt;li&gt;In the root of your project copy the following html code into a file named index.html&lt;/li&gt;
	&lt;li&gt;Open the index.html file with your browser of choice (note: chrome seems to be the preferred option)&lt;/li&gt;
&lt;/ol&gt;
&lt;script src=&quot;https://gist.github.com/fd6d40367b49bd811d6f99a9065f919a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The above sample is just a quick setup to get you going but there are many features in this library that you can take advantage of:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Markdown support using &quot;&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;data-markdown&amp;gt; ...&quot;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;PDF support by going to &quot;?print-pdf&quot; in chrome. The sample above provides support for this using a small javascript tag which makes use of some inbuilt javascript libraries.&lt;/li&gt;
	&lt;li&gt;Hidden notes support using &quot;&amp;lt;section data-separator-notes=...&amp;gt;&quot;&lt;/li&gt;
	&lt;li&gt;Slide data transitions such as &quot;fading&quot; in and out, zooming as well as controlling the speed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more features that you can play about with including embedded videos, images and other multimedia. One feature that particularly interests me is embedding external markdown files. In terms of project development teams would be able to provide customer demos along side your versioned code base. It’s also possible to override the existing css but you may find this to be difficult when using the markdown content due to the way that this is converted by reveal.js on the fly.&lt;/p&gt;

&lt;p&gt;For a quick introduction on other features in the current version 3 release have a look at the following slideshare from the author of Reveal.js Hakim El Hattab:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/hakimel/revealjs-300&quot;&gt;https://www.slideshare.net/hakimel/revealjs-300&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Javascript" /><category term="RevealJS" /><summary type="html">Using the reveal javascript library its possible to build intricate presentation slides for the browser. While its possible to create a sample using a web client over at https://slides.com/ I personally prefer to download the latest version directly from the github account Latest release in order to generate your slide presentation by hand.</summary></entry><entry><title type="html">Useful List Of Python Resources</title><link href="http://localhost:4000/python/Useful-List-Of-Python-Resources/" rel="alternate" type="text/html" title="Useful List Of Python Resources" /><published>2017-11-19T20:00:10+00:00</published><updated>2017-11-19T20:00:10+00:00</updated><id>http://localhost:4000/python/Useful-List-Of-Python-Resources</id><content type="html" xml:base="http://localhost:4000/python/Useful-List-Of-Python-Resources/">&lt;script src=&quot;https://gist.github.com/dda4cd4647375073e01c293cc56640db.js&quot;&gt; &lt;/script&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">Creating a Gists Webpage With ReactJS</title><link href="http://localhost:4000/javascript/reactjs/Creating-a-Gists-Webpage-With-ReactJS/" rel="alternate" type="text/html" title="Creating a Gists Webpage With ReactJS" /><published>2017-11-13T19:00:00+00:00</published><updated>2017-11-13T19:00:00+00:00</updated><id>http://localhost:4000/javascript/reactjs/Creating-a-Gists-Webpage-With-ReactJS</id><content type="html" xml:base="http://localhost:4000/javascript/reactjs/Creating-a-Gists-Webpage-With-ReactJS/">&lt;p&gt;I decided to build a simple ReactJS webpage to render my personal Gists from GitHub as an basic kata.&lt;/p&gt;

&lt;p&gt;However while the ReactJS part was fairly straightforward I was once again reminded about Cross Site Scripting (XSS) issues when trying to call API’s from another domain using javascript. Thankfully JQuery jsonp still works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;componentDidMount(){
    $.ajax({
      url: &quot;https://api.github.com/users/m-x-k/gists&quot;,
      jsonp: &quot;$jsonp&quot;
    }).done(function(data) {
      console.log(data);
      this.setState({gists: data});
    }.bind(this));    
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously in a production situation this isn’t what we would rely on!!!&lt;/p&gt;

&lt;p&gt;Reverse proxies like Nginx, HAProxy or Apache are much better suited to revolve these types of issues.&lt;/p&gt;

&lt;p&gt;Ideally we would setup a reverse proxy on “api.github.com” so that we can share a common domain for the client side requests. For example if your web page url was http://my.gists.com/index.html you might setup a reverse proxy like http://my.gists.com/api/m-x-k/gists.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: while its possible to mitigate the problem with headers it’s not an ideal solution as it depends on browser support.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/mxk/pen/WEJBbg&quot;&gt;https://codepen.io/mxk/pen/WEJBbg&lt;/a&gt;&lt;/p&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Javascript" /><category term="ReactJS" /><summary type="html">I decided to build a simple ReactJS webpage to render my personal Gists from GitHub as an basic kata.</summary></entry><entry><title type="html">Rapid prototyping with code templates</title><link href="http://localhost:4000/python/cookiecutter/Rapid-prototyping-with-code-templates/" rel="alternate" type="text/html" title="Rapid prototyping with code templates" /><published>2017-11-12T20:00:10+00:00</published><updated>2017-11-12T20:00:10+00:00</updated><id>http://localhost:4000/python/cookiecutter/Rapid-prototyping-with-code-templates</id><content type="html" xml:base="http://localhost:4000/python/cookiecutter/Rapid-prototyping-with-code-templates/">&lt;p&gt;Over the last few years I have been using Python quite a lot to build rapid prototypes. By far the best command line tool I’ve found for this is the python ‘cookiecutter’ project below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/audreyr/cookiecutter&quot;&gt;https://github.com/audreyr/cookiecutter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a large number of &lt;a href=&quot;https://github.com/audreyr/cookiecutter#python&quot;&gt;sample cookiecutter projects&lt;/a&gt; out there but it makes sense to build and maintain your own if you want to get the latest setup.&lt;/p&gt;

&lt;p&gt;For ease of use I have a number of linux command line aliases to create new projects from my own code template projects:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/a849a8b7d2da0f54dc35c4fb9b42983d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;In some cases these code template projects have been customised to my own preferences with IDE support etc … but for the most part they tend to be fairly vanilla in case other people might find them useful and also to allow me to customise each new project. So for example with Java applications I tend to prefer IntelliJ with Gradle but beyond that for me it doesn’t make sense to preload all of your favourite java libraries.&lt;/p&gt;

&lt;p&gt;In some work places I have noticed a tendency to try and standardise code structure with similar code template tools (e.g. maven archetypes). In many cases this can save project setup time but I tend not to favour this approach. Ideally in agile development teams it is best to reach a group consensus based on the project requirements first and then trying to agree on code standards such as naming, structure etc … A good place to start is often Uncle Bob’s Clean coders book which is widely distributed and possibly combining this with Extreme Programming techniques such as TDD, Pair Programming or Mobbing. This combined approach often gets extremely good results allowing for a wider group consensus and shared ownership.&lt;/p&gt;

&lt;p&gt;However in many situations the first place to start on a project is a quick prototype. It can therefore be convenient to use code templates in these situations. This actually helps to reinforce the concept that code implemented as part of the prototype is ‘temporary’ and therefore should be discarded and reimplemented by the team from scratch.&lt;/p&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Python" /><category term="Cookiecutter" /><summary type="html">Over the last few years I have been using Python quite a lot to build rapid prototypes. By far the best command line tool I’ve found for this is the python ‘cookiecutter’ project below:</summary></entry><entry><title type="html">Building a responsive photo gallery</title><link href="http://localhost:4000/javascript/Building-a-responsive-photo-gallery/" rel="alternate" type="text/html" title="Building a responsive photo gallery" /><published>2017-10-08T21:00:10+01:00</published><updated>2017-10-08T21:00:10+01:00</updated><id>http://localhost:4000/javascript/Building-a-responsive-photo-gallery</id><content type="html" xml:base="http://localhost:4000/javascript/Building-a-responsive-photo-gallery/">&lt;p&gt;Recently I needed to build a photo gallery for a website built with ReactJS. I came across a convenient react library “react-photo-gallery” which was ideal for this purpose. As a proof of concept I built a small Spring Boot app with ReactJS support:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/m-x-k/photo-gallery&quot;&gt;https://github.com/m-x-k/photo-gallery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application contains a few sample images which can easily be orientated to fit various devices and screen sizes for responsive behaviour.&lt;/p&gt;

&lt;p&gt;I also needed to provide a demo to show off some of the functionality before implementing further. Luckily Heroku provides a great environment for sample demo sites. As usual Heroku can be a little slow on the first load as it builds the app on demand. You can reach the demo site below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://responsive-photo-gallery.herokuapp.com/&quot;&gt;https://responsive-photo-gallery.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code implementation was straight forward to setup with the project split into two separate folders. One for the spring boot ‘src’ code and the other ‘ui’ folder for the ReactJS code. Support for Docker has been included as well as details and scripts on to upload the app and any photos to a Heroku account. The only tricky part was getting the folder permissions just right for the photos to load successfully.&lt;/p&gt;

&lt;p&gt;At the minute I tend to favour Gradle for building Java projects. It provides a robust DSL with various plugins and support for Maven etc … When it comes to Javascript building I tend to favour NPM/Yarn with Webpack especially for the ease of setup when it comes to ES6 transpiling. The combination allowed me to quickly setup an application structure supporting full stack builds on demand.&lt;/p&gt;</content><author><name>Martin Kelly</name><email>mxksolutions@gmail.com</email></author><category term="Javascript" /><category term="ReactJS" /><summary type="html">Recently I needed to build a photo gallery for a website built with ReactJS. I came across a convenient react library “react-photo-gallery” which was ideal for this purpose. As a proof of concept I built a small Spring Boot app with ReactJS support:</summary></entry></feed>